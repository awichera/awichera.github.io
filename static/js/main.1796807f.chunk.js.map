{"version":3,"sources":["App.js","MDparser.js","HomeContainer.js","serviceWorker.js","index.js","markdowns/kapr.md","logo.svg","markdowns/stika.md"],"names":["App","MDparser","props","Container","fluid","source","this","mdtext","Component","HomeContainer","state","formInput","Entries","kapr","stika","key","console","log","fetch","getEntrie","event","setState","target","value","then","r","text","slice","Row","className","Col","md","Card","CardHeader","CardBody","Form","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","placeholder","autoComplete","onChange","handleTextInput","bind","required","FormFeedback","valid","invalid","Button","color","onClick","handleSubmit","block","CardFooter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","urlsToCache","waitUntil","caches","open","cache","addAll","request","url","respondWith","module","exports"],"mappings":"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","file":"static/js/main.1796807f.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\n// import { Container } from 'reactstrap';\nimport { Button, ButtonGroup, ButtonToolbar,Card, CardBody, CardHeader,\n\t CardFooter, CardGroup, Col, Container, Row,\n\t Form, Alert, InputGroup, Input, InputGroupAddon, InputGroupText, FormFeedback,\n    } from 'reactstrap';\n\nimport ReactMarkdown from 'react-markdown'\n\n// import kapr from '../../../../public/markdowns/kapr.md'\n\n\nexport default class MDparser extends Component {\n\n\tconstructor(props) {\n        super(props);\n        // this.state = {\n        //     // input: '# This is a header\\n\\nAnd this is a paragraph'\n        //     // input:'_Here will be your result_'\n        //     keyword:props.keyword,\n        // };\n    }\n\n    // componentDidMount () {\n    //     this.updateMD(this.state.keyword);\n    // }\n\n    // updateMD(keyword) {\n    //         // console.log(newInput);\n    //         // fetch(`../../../../public/markdowns/${input}.md`)\n    //         fetch('../../../../public/markdowns/' + keyword + '.md')\n    //         .then((r) => r.text())\n    //         .then(text  => {\n    //             console.log(\"Bude kapr\");\n    //             console.log(text);\n    //             this.Text = text;\n    //         })\n    // }\n\n    // componentDidUpdate () {\n    //     const newKeyWord =  this.props.keyword;\n    //     if (newKeyWord != this.state.keyword){\n    //         this.setState({input:newKeyWord});\n    //         this.updateMD(newKeyWord)\n    //     }\n    // }\n\n\trender() {\n\n\t\treturn (\n\t\t\t<Container fluid>\n                <ReactMarkdown source={this.props.mdtext} />\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\n\n","import React, { Component } from 'react'\n// import { Container } from 'reactstrap';\nimport { Button, ButtonGroup, ButtonToolbar,Card, CardBody, CardHeader,\n\t CardFooter, CardGroup, Col, Container, Row,\n\t Form, Alert, InputGroup, Input, InputGroupAddon, InputGroupText, FormFeedback,\n\t} from 'reactstrap';\nimport MDparser from './MDparser';\n\nimport kapr from './markdowns/kapr.md'\nimport stika from './markdowns/stika.md'\n\n\nclass HomeContainer extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmdtext:\"\",\n\t\t\tformInput:\"\"\n\t\t}\n\t\tthis.Entries = {\n\t\t\t\"kapr\":kapr,\n\t\t\t\"stika\":stika\n\t\t}\n\t}\n\n\tgetEntrie (key) {\n\t\treturn this.Entries[key];\n\t}\n\n\n\tcomponentDidMount() {\n\t\tconsole.log (kapr)\n\t\tfor (var key in this.Entries) {\n\t\t\tfetch(this.getEntrie(key));\n\t\t\tconsole.log(\"key:\",key);\n\t\t}\n\t\t// fetch(kapr)\n\t\t// .then((response) => response.text()).then((text) => {\n\t\t// \tthis.setState({ terms: text })\n\t\t// \tconsole.log(text)\n\t\t// })\n\t}\n\n\thandleTextInput(event) {\n\t\tthis.setState({formInput:event.target.value});\n\t\t// console.log (\"event.target.value\",event.target.value)\n\t}\n\n\thandleSubmit(event) {\n\t\t// fetch('/markdowns/' + this.state.formInput + '.md')\n\t\tfetch (this.getEntrie(this.state.formInput))\n\t\t.then((r) => r.text())\n\t\t.then(text  => {\n\t\t\t// console.log(\"Bude kapr\");\n\t\t\t// console.log(text.slice(0,15));\n\t\t\tif (text.slice(0,15) == \"<!DOCTYPE html>\") {\n\t\t\t\ttext = `## Nenalezen\\nZáznam \"${this.state.formInput}\" průvodce nezná`;\n\t\t\t}\n\t\t\tthis.setState({mdtext:text});\n\n\n\t\t})\n\n\n\n\n\t\t// console.log (\"event.target.value\",event.target.value)\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<Container fluid>\n\t\t\t\t<Row className=\"justify-content-center\">\n\t\t\t\t\t<Col md=\"8\">\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t\t<b>\n\t\t\t\t\t\t\t\t\tStopařův průvodce po galaxii\n\t\t\t\t\t\t\t\t</b>\n\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t<p className=\"text-muted\">Stopuj</p>\n\t\t\t\t\t\t{/* <Alert isOpen = {responseText != null} color = {responseSuccess ? \"success\":\"danger\"}>\n\t\t\t\t\t\t\t{responseText}\n\t\t\t\t\t\t</Alert> */}\n\t\t\t\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t<InputGroupAddon addonType=\"prepend\">\n\t\t\t\t\t\t\t\t\t\t<InputGroupText>\n\t\t\t\t\t\t\t\t\t\t\t{/* <i className=\"icon-lock\"></i> */}\n\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t</InputGroupText>\n\t\t\t\t\t\t\t\t\t\t</InputGroupAddon>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"vogonská poezie\"\n\t\t\t\t\t\t\t\t\t\tautoComplete=\"vogonská poezie\"\n\t\t\t\t\t\t\t\t\t\t// onBlur = {this.handleEmailBlur.bind(this)}\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleTextInput.bind(this)}\n\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t// valid={this.state.email.valid}\n\t\t\t\t\t\t\t\t\t\t// invalid={this.state.email.valid===false}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<FormFeedback valid>\n\t\t\t\t\t\t\t\t\t\tThis email looks great!\n\t\t\t\t\t\t\t\t\t\t</FormFeedback>\n\t\t\t\t\t\t\t\t\t\t<FormFeedback invalid=\"true\">\n\t\t\t\t\t\t\t\t\t\tThis doesn't look like an email\n\t\t\t\t\t\t\t\t\t\t</FormFeedback>\n\t\t\t\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tcolor=\"success\"\n\t\t\t\t\t\t\t\t\t\t  onClick={this.handleSubmit.bind(this)}\n\t\t\t\t\t\t\t\t\t\t//   disabled={!this.state.submitPossible}\n\t\t\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tNajít\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t{/* <div>\n\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\tKapr\n\n\t\t\t\t\t\t\t\t</div> */}\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardFooter>\n\t\t\t\t\t\t\t\t<MDparser mdtext = {this.state.mdtext}/>\n\t\t\t\t\t\t\t</CardFooter>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\nexport default HomeContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\n\nexport function register(config) {\n  console.log(\"REGISTERING SW\")\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n    var CACHE_NAME = 'my-pwa-cache-v1';\n    var urlsToCache = [\n      '/markdowns/kapr.md',\n    ];\n\n\n    window.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(CACHE_NAME)\n          .then(function(cache) {\n            // Open a cache and cache our files\n            console.log(\"installing cache\")\n            return cache.addAll(urlsToCache);\n          })\n      );\n    });\n\n    window.addEventListener('fetch', function(event) {\n      console.log(event.request.url);\n      event.respondWith(\n          caches.match(event.request).then(function(response) {\n              return response || fetch(event.request);\n          })\n      );\n    });\n\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport HomeContainer from './HomeContainer'\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss'\n\n\nReactDOM.render(<HomeContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/kapr.d291ccad.md\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/stika.51fc5b94.md\";"],"sourceRoot":""}